version: "3.3"

services:

  traefik:
    image: "traefik:v3.0"
    container_name: "traefik"
    restart: always
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.caserver=${ACME_SERVER}" # Using env variable for ACME server
      - "--certificatesresolvers.myresolver.acme.email=${ACME_EMAIL}"     # Using env variable for email
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json" # Explicitly specify the storage file
      # Enable HTTP to HTTPS redirection middleware
      # - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      # - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      # - "--entrypoints.web.http.redirections.entryPoint.permanent=true"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "./persist/letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      backboneNetwork:
        ipv4_address: 172.20.0.2

  portainer:
    image: "portainer/portainer:latest"
    container_name: "portainer"
    restart: always
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./persist/portainer/data:/data"  # Mount volume for Portainer data persistence
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer-http.rule=Host(`portainer.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.portainer-http.entrypoints=web"
      - "traefik.http.routers.portainer-secure.rule=Host(`portainer.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.portainer-secure.entrypoints=websecure"
      - "traefik.http.routers.portainer-secure.tls.certresolver=myresolver"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
    networks:
      backboneNetwork:
        ipv4_address: 172.20.0.3

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
    volumes:
      - ./persist/prowlarr:/config
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prowlarr-http.rule=Host(`prowlarr.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.prowlarr-http.entrypoints=web"
      - "traefik.http.routers.prowlarr-secure.rule=Host(`prowlarr.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.prowlarr-secure.entrypoints=websecure"
      - "traefik.http.routers.prowlarr-secure.tls.certresolver=myresolver"
      - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"
    networks:
      backboneNetwork:
        ipv4_address: 172.20.0.4

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
    volumes:
      - "./persist/radarr/config:/radarr/config"
      - "./persist/radarr/movies:/radarr/movies"
      - "./persist/radarr/downloads:/radarr/downloads"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr-http.rule=Host(`radarr.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.radarr-http.entrypoints=web"
      - "traefik.http.routers.radarr-secure.rule=Host(`radarr.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.radarr-secure.entrypoints=websecure"
      - "traefik.http.routers.radarr-secure.tls.certresolver=myresolver"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
    networks:
      backboneNetwork:
        ipv4_address: 172.20.0.5

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
      - WEBUI_PORT=8080
    volumes:
      - "./persist/qbittorrent/config:/config"
      - "./persist/qbittorrent/downloads:/downloads"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qbittorrent-http.rule=Host(`qbittorrent.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.qbittorrent-http.entrypoints=web"
      - "traefik.http.routers.qbittorrent-secure.rule=Host(`qbittorrent.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.qbittorrent-secure.entrypoints=websecure"
      - "traefik.http.routers.qbittorrent-secure.tls.certresolver=myresolver"
      - "traefik.http.services.qbittorrent.loadbalancer.server.port=8080"
    networks:
      backboneNetwork:
        ipv4_address: 172.20.0.6

  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    restart: always
    environment:
      - PUID=1000  # Replace with your user ID
      - PGID=1000  # Replace with your group ID
      - TZ=Etc/UTC  # Replace with your timezone
    volumes:
      - "./persist/jellyfin/config:/config"
      - "./persist/jellyfin/cache:/cache"
      - "./persist/qbittorrent/downloads:/media"
    labels:
      - "traefik.enable=true"
      # HTTP router
      - "traefik.http.routers.jellyfin-http.rule=Host(`jellyfin.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.jellyfin-http.entrypoints=web"
      # HTTPS router
      - "traefik.http.routers.jellyfin-secure.rule=Host(`jellyfin.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.jellyfin-secure.entrypoints=websecure"
      - "traefik.http.routers.jellyfin-secure.tls.certresolver=myresolver"
      - "traefik.http.services.jellyfin-secure.loadbalancer.server.port=8096"
    networks:
      backboneNetwork:
        ipv4_address: 172.20.0.7

  vscode:
    image: codercom/code-server
    container_name: vscode-server
    restart: always
    environment:
      - PASSWORD=password  # Replace with your desired password
    volumes:
      - "./persist/code:/home/coder/project"
      - "/var/run/docker.sock:/var/run/docker.sock"
    labels:
      - "traefik.enable=true"
      # HTTP router
      - "traefik.http.routers.vscode-http.rule=Host(`vscode.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.vscode-http.entrypoints=web"
      # HTTPS router
      - "traefik.http.routers.vscode-secure.rule=Host(`vscode.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.vscode-secure.entrypoints=websecure"
      - "traefik.http.routers.vscode-secure.tls.certresolver=myresolver"
      - "traefik.http.services.vscode.loadbalancer.server.port=8080"
    networks:
      backboneNetwork:
        ipv4_address: 172.20.0.8


  whoami:
    image: "traefik/whoami"
    container_name: "whoami"
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami-http.rule=Host(`whoami.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.whoami-http.entrypoints=web"
      - "traefik.http.routers.whoami-secure.rule=Host(`whoami.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.whoami-secure.entrypoints=websecure"
      - "traefik.http.routers.whoami-secure.tls.certresolver=myresolver"
      - "traefik.http.services.whoami.loadbalancer.server.port=80"
    networks:
      backboneNetwork:
        ipv4_address: 172.20.0.10

networks:
  backboneNetwork:
    external: true
    ipam:
      config:
        - subnet: "172.20.0.0/16"
