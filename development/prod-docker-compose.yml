version: "3.3"

services:

  traefik:
    image: "traefik:v3.0"
    container_name: "traefik"
    restart: always
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      # uat
#      - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
#      # Prod
      - "--certificatesresolvers.myresolver.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email=rutvik2611@gmail.com"
      # Enable HTTP to HTTPS redirection middleware
#      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
#      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
#      - "--entrypoints.web.http.redirections.entryPoint.permanent=true"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - "./persist/letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - backboneNetwork

  portainer:
    image: "portainer/portainer:latest"
    container_name: "portainer"
    restart: always
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./persist/portainer/data:/data"  # Mount volume for Portainer data persistence
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"  # Define the entry point
      - "traefik.http.routers.portainer.tls.certresolver=myresolver"  # Define the TLS resolver
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"  # Define the Portainer service port
    networks:
      - backboneNetwork

  clip-sync:
    image: temp12611/clipsync:latest
    container_name: "clip-sync"
#    ports:
#      - "5001:5001"
#    env_file:
#      - ../.env
    restart: always
    environment:
      AWS_REGION: ${AWS_REGION:-}
      AWS_ACCOUNT_ID: ${AWS_ACCOUNT_ID:-}
      url: ${url}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      pass: ${pass}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.clipsync.rule=Host(`magicsync.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.clipsync.entrypoints=websecure"
      - "traefik.http.routers.clipsync.tls.certresolver=myresolver"
      - "traefik.http.services.clipsync.loadbalancer.server.port=5001"
    networks:
      - backboneNetwork

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
    volumes:
      - ./persist/prowlarr:/config
    ports:
      - "9696:9696"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prowlarr.rule=Host(`prowlarr.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.prowlarr.entrypoints=websecure"
      - "traefik.http.routers.prowlarr.tls.certresolver=myresolver"
      - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"
    networks:
      - backboneNetwork


  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
    volumes:
      - "./persist/radarr/config:/radarr/config"
      - "./persist/radarr/movies:/radarr/movies"
      - "./persist/raddar/downloads:/radarr/downloads"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`radarr.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.radarr.entrypoints=websecure"
      - "traefik.http.routers.radarr.tls.certresolver=myresolver"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
    networks:
      - backboneNetwork

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=America/New_York
      - WEBUI_PORT=8080
    volumes:
      - "./persist/qbittorrent/config:/config"
      - "./persist/qbittorrent/downloads:/downloads"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qbittorrent.rule=Host(`qbittorrent.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.qbittorrent.entrypoints=websecure"
      - "traefik.http.routers.qbittorrent.tls.certresolver=myresolver"
      - "traefik.http.services.qbittorrent.loadbalancer.server.port=8080"
    networks:
      - backboneNetwork
  jellyfin:
    image: jellyfin/jellyfin
    container_name: jellyfin
    restart: always
    environment:
      - PUID=1000  # Replace with your user ID
      - PGID=1000  # Replace with your group ID
      - TZ=Etc/UTC  # Replace with your timezone
    volumes:
      - "./persist/jellyfin/config:/config"
      - "./persist/jellyfin/cache:/cache"
      - "./persist/qbittorrent/downloads:/media"
    labels:
      - "traefik.enable=true"
      # HTTPS router
      - "traefik.http.routers.jellyfin-secure.rule=Host(`jellyfin.${MAIN_DOMAIN}`)"
      - "traefik.http.routers.jellyfin-secure.entrypoints=websecure"
      - "traefik.http.routers.jellyfin-secure.tls.certresolver=myresolver"
      - "traefik.http.services.jellyfin-secure.loadbalancer.server.port=8096"
    networks:
      - backboneNetwork







networks:
  backboneNetwork:
    external: true
